// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projekt.Data;

#nullable disable

namespace projekt.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250618205356_Update2")]
    partial class Update2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("projekt.Models.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClient"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("IdClient");

                    b.ToTable("Client", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("projekt.Models.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InstalmentsQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("IsFulfilled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstalment")
                        .HasColumnType("bit");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int");

                    b.Property<decimal>("SoftwareVersion")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UpdateYears")
                        .HasColumnType("int");

                    b.HasKey("ContractId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Contract", (string)null);
                });

            modelBuilder.Entity("projekt.Models.Discount", b =>
                {
                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("DiscountId");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("projekt.Models.DiscountSoftware", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int");

                    b.HasKey("DiscountId", "SoftwareId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("DiscountSoftware", (string)null);
                });

            modelBuilder.Entity("projekt.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("PaymentId");

                    b.HasIndex("ContractId");

                    b.ToTable("Payment", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("projekt.Models.Software", b =>
                {
                    b.Property<int>("SoftwareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoftwareId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Version")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("SoftwareId");

                    b.ToTable("Software", (string)null);
                });

            modelBuilder.Entity("projekt.Models.Company", b =>
                {
                    b.HasBaseType("projekt.Models.Client");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Krs")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("projekt.Models.Person", b =>
                {
                    b.HasBaseType("projekt.Models.Client");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("projekt.Models.Instalment", b =>
                {
                    b.HasBaseType("projekt.Models.Payment");

                    b.Property<int>("InstalmentNumber")
                        .HasColumnType("int");

                    b.ToTable("Instalment", (string)null);
                });

            modelBuilder.Entity("projekt.Models.Contract", b =>
                {
                    b.HasOne("projekt.Models.Client", "Client")
                        .WithMany("Contracts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projekt.Models.Software", "Software")
                        .WithMany("Contracts")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("projekt.Models.DiscountSoftware", b =>
                {
                    b.HasOne("projekt.Models.Discount", "Discount")
                        .WithMany("DiscountSoftwares")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projekt.Models.Software", "Software")
                        .WithMany("DiscountSoftwares")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("projekt.Models.Payment", b =>
                {
                    b.HasOne("projekt.Models.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("projekt.Models.Company", b =>
                {
                    b.HasOne("projekt.Models.Client", null)
                        .WithOne()
                        .HasForeignKey("projekt.Models.Company", "IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projekt.Models.Person", b =>
                {
                    b.HasOne("projekt.Models.Client", null)
                        .WithOne()
                        .HasForeignKey("projekt.Models.Person", "IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projekt.Models.Instalment", b =>
                {
                    b.HasOne("projekt.Models.Payment", null)
                        .WithOne()
                        .HasForeignKey("projekt.Models.Instalment", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projekt.Models.Client", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("projekt.Models.Contract", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("projekt.Models.Discount", b =>
                {
                    b.Navigation("DiscountSoftwares");
                });

            modelBuilder.Entity("projekt.Models.Software", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("DiscountSoftwares");
                });
#pragma warning restore 612, 618
        }
    }
}
